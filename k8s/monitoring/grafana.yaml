apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-config
  namespace: ai-printer
data:
  grafana.ini: |
    [server]
    http_port = 3000
    domain = grafana.ai-printer.com
    root_url = https://grafana.ai-printer.com
    
    [security]
    admin_user = admin
    admin_password = ${GRAFANA_PASSWORD}
    secret_key = ${SECRET_KEY}
    
    [users]
    allow_sign_up = false
    allow_org_create = false
    default_theme = dark
    
    [auth]
    disable_login_form = false
    
    [auth.google]
    enabled = true
    client_id = ${GOOGLE_CLIENT_ID}
    client_secret = ${GOOGLE_CLIENT_SECRET}
    scopes = https://www.googleapis.com/auth/userinfo.profile https://www.googleapis.com/auth/userinfo.email
    auth_url = https://accounts.google.com/o/oauth2/auth
    token_url = https://accounts.google.com/o/oauth2/token
    api_url = https://www.googleapis.com/oauth2/v1/userinfo
    allowed_domains = ai-printer.com
    
    [database]
    type = postgres
    host = postgres-service:5432
    name = grafana
    user = grafana
    password = ${DB_PASSWORD}
    ssl_mode = disable
    
    [session]
    provider = redis
    provider_config = addr=redis-service:6379,password=${REDIS_PASSWORD},db=1
    
    [alerting]
    enabled = true
    execute_alerts = true
    
    [metrics]
    enabled = true
    
    [log]
    mode = console
    level = info

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-datasources
  namespace: ai-printer
data:
  datasources.yml: |
    apiVersion: 1
    datasources:
    - name: Prometheus
      type: prometheus
      access: proxy
      url: http://prometheus-service:9090
      isDefault: true
      editable: true
      jsonData:
        timeInterval: "15s"
        queryTimeout: "60s"
        httpMethod: "POST"
      secureJsonData:
        basicAuthPassword: ""

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-dashboards-config
  namespace: ai-printer
data:
  dashboards.yml: |
    apiVersion: 1
    providers:
    - name: 'AI Printer Dashboards'
      orgId: 1
      folder: 'AI Printer'
      folderUid: 'ai-printer'
      type: file
      disableDeletion: false
      updateIntervalSeconds: 30
      allowUiUpdates: true
      options:
        path: /var/lib/grafana/dashboards

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-dashboard-overview
  namespace: ai-printer
data:
  ai-printer-overview.json: |
    {
      "dashboard": {
        "id": null,
        "title": "AI Printer Overview",
        "tags": ["ai-printer", "overview"],
        "timezone": "browser",
        "refresh": "30s",
        "time": {
          "from": "now-1h",
          "to": "now"
        },
        "panels": [
          {
            "id": 1,
            "title": "API Request Rate",
            "type": "graph",
            "targets": [
              {
                "expr": "rate(http_requests_total{job=\"ai-printer-backend\"}[5m])",
                "legendFormat": "{{method}} {{endpoint}}"
              }
            ],
            "gridPos": {"h": 8, "w": 12, "x": 0, "y": 0}
          },
          {
            "id": 2,
            "title": "Response Time",
            "type": "graph",
            "targets": [
              {
                "expr": "histogram_quantile(0.95, rate(http_request_duration_seconds_bucket{job=\"ai-printer-backend\"}[5m]))",
                "legendFormat": "95th percentile"
              },
              {
                "expr": "histogram_quantile(0.50, rate(http_request_duration_seconds_bucket{job=\"ai-printer-backend\"}[5m]))",
                "legendFormat": "50th percentile"
              }
            ],
            "gridPos": {"h": 8, "w": 12, "x": 12, "y": 0}
          },
          {
            "id": 3,
            "title": "Error Rate",
            "type": "singlestat",
            "targets": [
              {
                "expr": "rate(http_requests_total{job=\"ai-printer-backend\",status=~\"5..\"}[5m]) / rate(http_requests_total{job=\"ai-printer-backend\"}[5m]) * 100",
                "legendFormat": "Error Rate %"
              }
            ],
            "gridPos": {"h": 4, "w": 6, "x": 0, "y": 8}
          },
          {
            "id": 4,
            "title": "Active Connections",
            "type": "singlestat",
            "targets": [
              {
                "expr": "pg_stat_database_numbackends{datname=\"ai_printer_db\"}",
                "legendFormat": "DB Connections"
              }
            ],
            "gridPos": {"h": 4, "w": 6, "x": 6, "y": 8}
          },
          {
            "id": 5,
            "title": "Memory Usage",
            "type": "graph",
            "targets": [
              {
                "expr": "container_memory_usage_bytes{pod=~\"backend-.*\"} / container_spec_memory_limit_bytes{pod=~\"backend-.*\"} * 100",
                "legendFormat": "{{pod}}"
              }
            ],
            "gridPos": {"h": 8, "w": 12, "x": 12, "y": 8}
          },
          {
            "id": 6,
            "title": "Celery Tasks",
            "type": "graph",
            "targets": [
              {
                "expr": "celery_tasks_total",
                "legendFormat": "{{state}}"
              }
            ],
            "gridPos": {"h": 8, "w": 24, "x": 0, "y": 16}
          }
        ]
      }
    }

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: ai-printer
  labels:
    app: grafana
    component: monitoring
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
        component: monitoring
    spec:
      securityContext:
        fsGroup: 472
        runAsUser: 472
        runAsNonRoot: true
      containers:
      - name: grafana
        image: grafana/grafana:10.0.0
        ports:
        - containerPort: 3000
          name: grafana
        env:
        - name: GF_SECURITY_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: ai-printer-secrets
              key: GRAFANA_PASSWORD
        - name: GF_SECURITY_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: ai-printer-secrets
              key: SECRET_KEY
        - name: GOOGLE_CLIENT_ID
          valueFrom:
            secretKeyRef:
              name: ai-printer-secrets
              key: GOOGLE_CLIENT_ID
        - name: GOOGLE_CLIENT_SECRET
          valueFrom:
            secretKeyRef:
              name: ai-printer-secrets
              key: GOOGLE_CLIENT_SECRET
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: ai-printer-secrets
              key: DB_PASSWORD
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: ai-printer-secrets
              key: REDIS_PASSWORD
        volumeMounts:
        - name: grafana-storage
          mountPath: /var/lib/grafana
        - name: grafana-config
          mountPath: /etc/grafana/grafana.ini
          subPath: grafana.ini
          readOnly: true
        - name: grafana-datasources
          mountPath: /etc/grafana/provisioning/datasources/datasources.yml
          subPath: datasources.yml
          readOnly: true
        - name: grafana-dashboards-config
          mountPath: /etc/grafana/provisioning/dashboards/dashboards.yml
          subPath: dashboards.yml
          readOnly: true
        - name: grafana-dashboard-overview
          mountPath: /var/lib/grafana/dashboards/ai-printer-overview.json
          subPath: ai-printer-overview.json
          readOnly: true
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 5
          failureThreshold: 3
      volumes:
      - name: grafana-storage
        persistentVolumeClaim:
          claimName: grafana-pvc
      - name: grafana-config
        configMap:
          name: grafana-config
      - name: grafana-datasources
        configMap:
          name: grafana-datasources
      - name: grafana-dashboards-config
        configMap:
          name: grafana-dashboards-config
      - name: grafana-dashboard-overview
        configMap:
          name: grafana-dashboard-overview

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: grafana-pvc
  namespace: ai-printer
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: fast-ssd
  resources:
    requests:
      storage: 10Gi

---
apiVersion: v1
kind: Service
metadata:
  name: grafana-service
  namespace: ai-printer
  labels:
    app: grafana
    component: monitoring
spec:
  selector:
    app: grafana
  ports:
  - port: 3000
    targetPort: 3000
    name: grafana
  type: ClusterIP

---
# Postgres Exporter for database metrics
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres-exporter
  namespace: ai-printer
  labels:
    app: postgres-exporter
    component: monitoring
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres-exporter
  template:
    metadata:
      labels:
        app: postgres-exporter
        component: monitoring
    spec:
      containers:
      - name: postgres-exporter
        image: prometheuscommunity/postgres-exporter:v0.13.2
        ports:
        - containerPort: 9187
          name: metrics
        env:
        - name: DATA_SOURCE_NAME
          value: "postgresql://ai_printer:$(DB_PASSWORD)@postgres-service:5432/ai_printer_db?sslmode=disable"
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: ai-printer-secrets
              key: DB_PASSWORD
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"

---
apiVersion: v1
kind: Service
metadata:
  name: postgres-exporter-service
  namespace: ai-printer
  labels:
    app: postgres-exporter
    component: monitoring
spec:
  selector:
    app: postgres-exporter
  ports:
  - port: 9187
    targetPort: 9187
    name: metrics
  type: ClusterIP

---
# Redis Exporter for cache metrics
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis-exporter
  namespace: ai-printer
  labels:
    app: redis-exporter
    component: monitoring
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis-exporter
  template:
    metadata:
      labels:
        app: redis-exporter
        component: monitoring
    spec:
      containers:
      - name: redis-exporter
        image: oliver006/redis_exporter:v1.52.0
        ports:
        - containerPort: 9121
          name: metrics
        env:
        - name: REDIS_ADDR
          value: "redis://redis-service:6379"
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: ai-printer-secrets
              key: REDIS_PASSWORD
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"

---
apiVersion: v1
kind: Service
metadata:
  name: redis-exporter-service
  namespace: ai-printer
  labels:
    app: redis-exporter
    component: monitoring
spec:
  selector:
    app: redis-exporter
  ports:
  - port: 9121
    targetPort: 9121
    name: metrics
  type: ClusterIP